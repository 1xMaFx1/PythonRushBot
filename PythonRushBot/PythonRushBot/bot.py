from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from credentials import ChatGPT_TOKEN, TG_TOKEN
from gpt import ChatGptService
from util import (
    load_message,
    send_text,
    send_image,
    show_main_menu,
    Dialog,
    load_prompt,
)

dialogues = {
    'gpt': 'handle_gpt_question',
    'random': 'random_dialog',
    'talk': 'handle_talk_message',
    'professor': 'handle_professor_question',
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(
        update,
        context,
        {
            'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
            'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
            'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
            'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
            'professor': '–°–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è üíª'
        }
    )


async def set_random_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'random'
    await random_dialog(update, context)


async def set_gpt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    await send_image(update, context, "gpt")
    await send_text(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è ChatGPT.")


async def set_talk_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω", callback_data="talk_cobain")],
        [InlineKeyboardButton("–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥", callback_data="talk_hawking")],
        [InlineKeyboardButton("–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ", callback_data="talk_nietzsche")],
        [InlineKeyboardButton("–ö–æ—Ä–æ–ª–µ–≤–∞ –í–∏–∫—Ç–æ—Ä–∏—è", callback_data="talk_queen")],
        [InlineKeyboardButton("–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", callback_data="talk_tolkien")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )


async def handle_talk_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    personality = query.data

    prompt = load_prompt(personality)
    if not prompt:
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    dialog.mode = personality
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, personality)
    personality_name = personality.replace("talk_", "").capitalize()
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {personality_name}. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")


async def handle_talk_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é"""
    if dialog.mode and dialog.mode.startswith("talk_"):
        user_message = update.message.text

        response = await chat_gpt.add_message(user_message)
        await send_text(update, context, response)
    else:
        await send_text(update, context, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /talk.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç dialog.mode"""
    if dialog.mode == "professor":
        await handle_professor_question(update, context)
    elif dialog.mode and dialog.mode.startswith("talk_"):
        await handle_talk_message(update, context)
    elif dialog.mode and dialog.mode.startswith("quiz_"):
        await handle_quiz_answer(update, context)
    elif dialog.mode in dialogues:
        handler_name = dialogues[dialog.mode]
        handler = globals().get(handler_name)
        if handler:
            await handler(update, context)
        else:
            await send_text(update, context, f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ {dialog.mode} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await send_text(update, context, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")


async def random_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, "random")
    prompt = load_prompt("random")
    chat_gpt.set_prompt(prompt)
    response = await chat_gpt.send_message_list()
    await send_text(update, context, response)


async def handle_gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    response = await chat_gpt.add_message(user_message)
    await send_text(update, context, response)


async def set_quiz_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"""
    dialog.mode = 'quiz'
    await send_image(update, context, "quiz")
    context.user_data["correct_answers"] = 0

    keyboard = [
        [InlineKeyboardButton("–¢–µ–º–∞ 1: –ò—Å—Ç–æ—Ä–∏—è", callback_data="quiz_history")],
        [InlineKeyboardButton("–¢–µ–º–∞ 2: –ù–∞—É–∫–∞", callback_data="quiz_science")],
        [InlineKeyboardButton("–¢–µ–º–∞ 3: –ò—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="quiz_art")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:", reply_markup=reply_markup)


async def handle_quiz_topic_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    await query.answer()
    topic = query.data

    topic_name = topic.replace("quiz_", "").capitalize()
    topic_prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ —Ç–µ–º–µ '{topic_name}'. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."

    dialog.mode = topic
    chat_gpt.set_prompt(topic_prompt)

    question = await chat_gpt.send_message_list()
    await send_text(update, context, f"–í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic_name}':\n{question}")
    context.user_data['current_question'] = question


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∫–≤–∏–∑, –ø–æ–∫–∞ –Ω–µ —Å–∫–∞–∂—É—Ç '—Å—Ç–æ–ø'"""
    if not dialog.mode or not dialog.mode.startswith("quiz_"):
        await send_text(update, context, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–≤–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quiz.")
        return

    user_answer = update.message.text

    if user_answer.lower() == "—Å—Ç–æ–ø":
        await send_text(update, context, "–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        dialog.mode = 'main'
        return

    question = context.user_data.get('current_question', '')

    check_prompt = (f"–í–æ–ø—Ä–æ—Å: '{question}'. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_answer}'. –°–∫–∞–∂–∏, –≤–µ—Ä–Ω–æ –ª–∏ —ç—Ç–æ. –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, "
                    f"—É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")
    chat_gpt.set_prompt(check_prompt)
    response = await chat_gpt.send_message_list()

    if "–≤–µ—Ä–Ω–æ" in response.lower() and "–Ω–µ–≤–µ—Ä–Ω–æ" not in response.lower():
        context.user_data["correct_answers"] += 1
        result_text = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ\n\n–í–∞—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {context.user_data['correct_answers']}"
    else:
        result_text = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòû\n{response}\n\n–í–∞—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {context.user_data['correct_answers']}"

    await send_text(update, context, result_text)

    await handle_next_question(update, context)


async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–≤–∏–∑–∞"""
    if not dialog.mode or not dialog.mode.startswith("quiz_"):
        await send_text(update, context, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–≤–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quiz.")
        return

    topic = dialog.mode.replace("quiz_", "")
    topic_name = topic.capitalize()
    topic_prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ —Ç–µ–º–µ '{topic_name}'. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."
    chat_gpt.set_prompt(topic_prompt)

    question = await chat_gpt.send_message_list()
    context.user_data['current_question'] = question
    await send_text(update, context, f"–í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic_name}':\n{question}")


professor_prompt = (
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. "
    "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–Ω—è—Ç–Ω–æ –∏ —Å –¥–µ—Ç–∞–ª—è–º–∏, –ø–æ–º–æ–≥–∞–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏, "
    "–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –ú–æ–∂–µ—à—å –Ω–µ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è "
    "–∫–∞–∂–¥—ã–π —Ä–∞–∑"
)


async def set_professor_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º '–ü—Ä–µ–ø–æ–¥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'"""
    dialog.mode = 'professor'
    await send_text(update, context,
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º '–ü—Ä–µ–ø–æ–¥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–º–µ—Ä "
                    "–∫–æ–¥–∞.")


async def handle_professor_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ '–ü—Ä–µ–ø–æ–¥ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'"""
    user_message = update.message.text
    prompt = f"{professor_prompt} –í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {user_message}"

    response = await chat_gpt.add_message(prompt)

    await send_text(update, context, response)

dialog = Dialog()
dialog.mode = None
chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(TG_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler("random", set_random_mode))
app.add_handler(CommandHandler("gpt", set_gpt_mode))
app.add_handler(CommandHandler("talk", set_talk_mode))
app.add_handler(CommandHandler("quiz", set_quiz_mode))
app.add_handler(CommandHandler("professor", set_professor_mode))

app.add_handler(CallbackQueryHandler(handle_talk_choice, pattern="^(talk_cobain|talk_hawking|talk_nietzsche"
                                                                 "|talk_queen|talk_tolkien)$"))
app.add_handler(CallbackQueryHandler(handle_quiz_topic_choice, pattern="^(quiz_history|quiz_science|quiz_art)$"))
app.add_handler(CallbackQueryHandler(handle_next_question, pattern="^next_question$"))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

app.run_polling()

