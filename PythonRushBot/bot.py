from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN, TG_TOKEN
from gpt import ChatGptService
from util import load_message, send_text, \
    send_image, show_main_menu, Dialog
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from util import load_prompt


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, "random")
    prompt = load_prompt("random")
    chat_gpt.set_prompt(prompt)
    response = await chat_gpt.send_message_list()
    await send_text(update, context, response)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, "gpt")
    await send_text(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è ChatGPT.")
    dialog.mode = 'awaiting_gpt_question'


async def handle_gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode != 'awaiting_gpt_question':
        return
    user_message = update.message.text
    response = await chat_gpt.add_message(user_message)
    await send_text(update, context, response)
    dialog.mode = None


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω", callback_data="talk_cobain")],
        [InlineKeyboardButton("–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥", callback_data="talk_hawking")],
        [InlineKeyboardButton("–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ", callback_data="talk_nietzsche")],
        [InlineKeyboardButton("–ö–æ—Ä–æ–ª–µ–≤–∞ –í–∏–∫—Ç–æ—Ä–∏—è", callback_data="talk_queen")],
        [InlineKeyboardButton("–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", callback_data="talk_tolkien")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)


async def handle_talk_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    personality = query.data

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ ChatGPT
    prompt = load_prompt(personality)
    if not prompt:
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    dialog.mode = personality
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, personality)
    personality_name = personality.replace("talk_", "").capitalize()
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {personality_name}. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")


async def handle_talk_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode and dialog.mode.startswith("talk_"):
        user_message = update.message.text
        response = await chat_gpt.add_message(user_message)
        await send_text(update, context, response)
    else:
        await send_text(update, context, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /talk.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
dialog = Dialog()
dialog.mode = None
chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(TG_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler("random", random))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CallbackQueryHandler(handle_talk_choice,
                                     pattern="^(talk_cobain|talk_hawking|talk_nietzsche|talk_queen|talk_tolkien)$"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gpt_question))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_talk_message))

app.run_polling()
